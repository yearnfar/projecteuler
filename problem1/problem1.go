package problem1

import (
	"fmt"
	"math"
)

func init() {
	fmt.Println(problem2())
}

//If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
//Find the sum of all the multiples of 3 or 5 below 1000.
func problem1(n float64) float64 {
	m := float64(0)

	for i := float64(0); i < n; i++ {
		if math.Mod(i, 3) == 0 || math.Mod(i, 5) == 0 {
			m += i
		}
	}

	return m
}

//Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
//1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
func problem2() int {
	a1 := 1
	a2 := 2
	m := 2
	n := 0

	for {
		n = a1 + a2

		if n > 4000000 {
			break
		}

		if a1 < a2 {
			a1 = n
		} else {
			a2 = n
		}

		if math.Mod(float64(n), 2) == 0 {
			m += n
		}
	}

	return m
}
